<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EntityKeyNotFound" xml:space="preserve">
    <value>No entity found in the repository with the '{0}' key.</value>
  </data>
  <data name="EntityPrimaryKeyValuesLengthMismatch" xml:space="preserve">
    <value>The number of primary key values passed must match number of primary key values defined on the entity.</value>
  </data>
  <data name="EntityRequiresPrimaryKey" xml:space="preserve">
    <value>The instance of entity type '{0}' requires a primary key to be defined.</value>
  </data>
  <data name="ForeignKeyAttributeOnPropertyNotFoundOnDependentType" xml:space="preserve">
    <value>The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. The foreign key name '{2}' was not found on the dependent type '{1}'. The Name value should be a comma separated list of foreign key property names.</value>
  </data>
  <data name="EntityPrimaryKeyTypesMismatch" xml:space="preserve">
    <value>The repository primary key type(s) constraint must match the number of primary key type(s) and ordering defined on the entity.</value>
  </data>
  <data name="UnableToDetermineCompositePrimaryKeyOrdering" xml:space="preserve">
    <value>Unable to determine composite primary key ordering for type '{0}'. Use the ColumnAttribute to specify an order for composite primary keys.</value>
  </data>
  <data name="QueryExecutionNotSupported" xml:space="preserve">
    <value>This context provider does not support SQL query execution.</value>
  </data>
  <data name="TransactionNotSupported" xml:space="preserve">
    <value>This context provider does not support transactions.</value>
  </data>
  <data name="EntityAlreadyBeingTrackedInStore" xml:space="preserve">
    <value>The instance of entity type '{0}' cannot be added to the store because another instance of this type with the same key is already being tracked.</value>
  </data>
  <data name="EntityKeyValueTypeInvalid" xml:space="preserve">
    <value>The instance of entity type '{0}' cannot be added to the store because the key type '{1}' is an invalid primary key property type.</value>
  </data>
  <data name="EntityNotFoundInStore" xml:space="preserve">
    <value>Attempted to update or delete an entity that does not exist in the store.</value>
  </data>
  <data name="SpecificationMissingFromQueryOptions" xml:space="preserve">
    <value>The specified query options is missing a specification predicate.</value>
  </data>
  <data name="UnableToFindConfigurationSection" xml:space="preserve">
    <value>Unable to find a '{0}' configuration section. For more information on DotNetToolkit.Repository configuration, visit the https://github.com/johelvisguzman/DotNetToolkit.Repository/wiki/Config-File-Setup.</value>
  </data>
  <data name="UnableToResolveTypeWithDependencyResolver" xml:space="preserve">
    <value>Unable to resolve an instance for '{0}'. Please consider using the {1} to use an IOC container.</value>
  </data>
  <data name="UnableToResolveTypeWithDependencyResolver_ConfigFile" xml:space="preserve">
    <value>Unable to resolve an instance for '{0}'. Please consider using the {1} to use an IOC container or provide additional parameters to create an instance for the specified type. For more information on DotNetToolkit.Repository configuration, visit the https://github.com/johelvisguzman/DotNetToolkit.Repository/wiki/Config-File-Setup.</value>
  </data>
  <data name="RepositoryExceptionMessage" xml:space="preserve">
    <value>An error has occurred while performing an operation within the repository. Please see inner exception for fault details.</value>
  </data>
  <data name="GroupBySortingNotSupported" xml:space="preserve">
    <value>This context provider does not support groupby operation with sorting.</value>
  </data>
  <data name="ContextProviderNotConfiguered" xml:space="preserve">
    <value>No context provider has been configured. For more information on DotNetToolkit.Repository options configuration, visit the https://github.com/johelvisguzman/DotNetToolkit.Repository/wiki/Repository-Options-Configuration.</value>
  </data>
</root>